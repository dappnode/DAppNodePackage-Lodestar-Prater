version: "2"
fields:
  - id: GRAFFITI
    target:
      type: environment
      name: GRAFFITI
      service: validator
    title: Graffiti
    maxLength: 32
    description: >-
      Add a string to your proposed blocks, which will be seen on the block explorer
  - id: checkpointSyncUrl
    target:
      type: environment
      name: CHECKPOINT_SYNC_URL
      service: beacon-chain
    title: Checkpoint for fast sync
    description: >-
      To get Lodestar up and running in only a few minutes, you can start Lodestar from a recent finalized checkpoint state rather than syncing from genesis. This is substantially **faster** and consumes **less resources** than syncing from genesis, while still providing all the same features. Be sure you are using a trusted node for the fast sync.
      Use the dappnode official endpoint `https://checkpoint-sync-prater.dappnode.io` 
      *Note - If you are going to provide your own checkpoint sync endpoint, make sure you do not use a slash `/` at the end of the URL.*
    required: false
  - id: feeRecipientAddress
    target:
      type: environment
      name: FEE_RECIPIENT_ADDRESS
      service: [validator, beacon-chain]
    title: Fee Recipient Address
    description: >-
      Fee Recipient is a feature that lets you specify a priority fee recipient address on your validator client instance and beacon node. Make sure this is an address you control. After The Merge, Execution Clients will begin depositing priority fees into this address whenever your validator proposes a new block.
    required: true
    pattern: "^0x[a-fA-F0-9]{40}$"
    patternErrorMessage: Must be a valid address (0x1fd16a...)
  - id: doppelgangerProtection
    target:
      type: environment
      name: DOPPELGANGER_PROTECTION
      service: validator
    title: Enable Doppelganger Protection
    description: >-
      Doppelganger protection attempts to detect other instances of a validator operating on the network before any slashable offenses can be committed.
      This is achieved by staying silent for 2-3 epochs after a validator is started, so it can listen for other instances of that validator before starting to sign potentially slashable messages.


      **Note:** Running the same validator twice will inevitably result in slashing. Doppelganger protection should be considered as a last line of defense that might save a validator from being slashed due to operator error, but there is no guarantee it will detect a duplicate validator before slashing conditions arise.
    enum:
      - "true"
      - "false"
    required: true
